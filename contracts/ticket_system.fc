#include "imports/stdlib.fc";
const op::buy_ticket = "op::buy_ticket"c; ;;

const int error::invalid_signature = 33;
const int error::invalid_subwallet_id = 34;
const int error::invalid_created_at = 35;
const int error::already_executed = 36;
const int error::invalid_message_to_send = 37;
const int error::invalid_timeout = 38;

const int KEY_SIZE = 13;
const int SIGNATURE_SIZE = 512;
const int PUBLIC_KEY_SIZE = 256;
const int SUBWALLET_ID_SIZE = 32;
const int TIMESTAMP_SIZE = 64;
const int TIMEOUT_SIZE = 22; ;; 2^22 / 60 / 60 / 24 - up to ~48 days


(int , cell , slice) load_data() inline {
    slice ds = get_data().begin_parse();
    int total_sale = ds~load_uint(32);
    cell users = ds~load_dict();
    slice hoster_address = ds~load_msg_addr();
    return (total_sale , users , hoster_address);
}

() save_data(int total_sale, cell users , slice hoster_address) impure {
    set_data(begin_cell().store_uint(total_sale , 32).store_dict(users).store_slice(hoster_address).end_cell());
}




() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; just receive ton coins
    if(in_msg_body.slice_empty?()){
        return ();
    }

    slice cs = in_msg_full.begin_parse();

    ;; just receive ton coins from bounce message 
    int flags = cs~load_uint(4);
    if(flags & 1){
        return ();
    }




    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_op();
    int query_id = in_msg_body~load_uint(64);


    if (op == op::buy_ticket){

    }

}
